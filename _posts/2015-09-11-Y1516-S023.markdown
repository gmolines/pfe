---
layout: post
title: "Design an Algorithm to Processing k Nearest Neighbor over Data Stream"
date: 2015-09-11 17:07:57
categories: [dispo, Set(AL)]
pid: Y1516-S023
type: Research
contact: Fabrice Huet
---
       
Given a point p and a set of points S, the kNN operation finds the k closest points to p in S. It is a computational intensive task with a large range of applications such as machine learning, knowledge discovery or data mining. However, as the volume and the dimension of data increase, only distributed approaches can perform such costly operation in a reasonable time. Recent works have focused on implementing efficient solutions using the MapReduce programming model because it is suitable for distributed large-scale data processing. But now the problem is: sometime we may want the answer in real-time or quasi real-time, while MapReduce is an offline processing platform and it can not adapt to the update of data.
 
Stream is a sequence of data made available over time. A data stream can be thought of as items on a conveyor belt being processed one at a time rather than in large batches. Apache Storm is a real-time, fault-tolerant and distributed stream data processing system. Storm is currently being used to run various critical computations in Twitter at scale, and in real-time.
 
The purpose of this PFE is to implement the kNN join over data stream on a stream-processing platform --- Storm. This PFE has four steps:
-   The first step is to get familiar with the existing kNN algorithm processing on MapReduce.
-   The second step is to propose a continuous way of processing these algorithms (or propose a new algorithm), which can efficiently run kNN join on Storm with a good data partitioning strategy.
-   The third step is to implement this algorithm in Storm
-   The last step will be eventually to perform a benchmark to verify the results.
 
The students will be provided with several instructions about Storm and Stream Processing, and several papers we have already published on processing kNN on MapReduce. A preliminary version of many algorithms for kNN join on MapReduce will also be provided. The students need to understand these algorithms and make them work in a continuous way on Storm

This work will be done in collaboration with Sophie Song, PhD student in the Scale group.

#### Compétences Requises
Prerequisite:
- to have a good background in Java.
      - to have the ability to learn a new processing platform and new algorithms.
      - the knowledge about kNN or Storm will be a big plus
 


#### Références

  * Équipe: Scale
  * [ http://storm-project.net]( http://storm-project.net)
  * [https://hal.inria.fr/hal-01097337](https://hal.inria.fr/hal-01097337)

#### Informations Administratives
  * Contact : Fabrice Huet <fabrice.huet@gmail.com>
  * Identifiant sujet : `Y1516-S023`
  * Type : Research
  * Parcours Recommandés : Set(AL)
     