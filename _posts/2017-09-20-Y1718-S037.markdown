---
layout: post
title: "Algorithmes de clusterisation et ligne de produits logicielles"
date: 2017-09-20 16:19:05
categories: [dispo, sd]
pid: Y1718-S037
type: Engineering
contact: Michel Riveill
---
       
Comparaison du comportement des algorithmes de clusterisation en fonction des caractéristiques du jeu de données et des paramètres de l'Algorithme.

Contexte du stage 
La construction d'une chaine de traitement pour l’analyse de données dépend au moins (i) de l'ensemble de données collectées, (ii) et de ce que l’on veut faire avec les résultats. Cette tâche est très complexe en raison du nombre croissant d'algorithmes disponibles et de la difficulté à choisir le bon algorithme et surtout les prétraitement nécessaire à leur bonne exécution. 
Les algorithmes d’apprentissages sont classés généralement en grande famille selon que l’on essaie de prédire la classe ou la valeur d’un élément, ou de regeouper les données qui se ressemblent. Le but de ce projet est de participer à la construction d’un système logiciel, construit sous la forme d’une ligne de produit logiciel et qui aide à la construction d’une chaine de traitement en particulier dans le cadre de la clusterisation.
La clusterisation1 ou en français correct, le partitionnement de données est une des méthodes d'analyse des données. Elle vise à diviser un ensemble de données en différents « paquets » homogènes, en ce sens que les données de chaque sous-ensemble partagent des caractéristiques communes, qui correspondent le plus souvent à des critères de proximité ou de similarité que l'on définit en introduisant des mesures et classes de distance entre objets. Pour obtenir un bon partitionnement, il convient d'à la fois :
minimiser l'inertie intra-classe pour obtenir des grappes (cluster en anglais) les plus homogènes possibles ;
maximiser l'inertie inter-classe afin d'obtenir des sous-ensembles bien différenciés.

La cible de projet est de contribuer à la réalisation d’une ligne de produits logiciels (en anglais SPL : Software Product Line). Une ligne de produits logiciels [2, 5] adapte au domaine du génie logiciel les grands principes de personnalisation qui ont cours dans l'industrie traditionnelle et vise à proposer un système logiciel de produits de qualité adapté au besoin du client, avec un effort de développement réduit et un surtout un délai de mise sur le marché le plus réduit possible en systématisant une approche par réutilisation et spécialisation de composants logiciels. Comme le SPL que nous visons existe déjà pour des problèmes de classification (ROCKFlows [3, 4] : http://rockflows.i3s.unice.fr/), il s’agira de vous inspirer de son fonctionnement pour identifier les points clés nécessaires à établir une nouvelle branche de ROCKflows pour les problèmes de clusterisation. 

Objectifs du projet:
Pour construire un workflow permettant de clusteriser des données, vous devrez identifier, étape par étape les questions qui se posent au data analiste afin qu’il puisse :
- choisir l’ordre et les pre-traitement à appliquer aux données
- choisir la famille d’algorithme de clusterisation permettant de traiter les données
- identifier des critères de comparaison entre les algorithmes
- etc.
et mettre en œuvre de manière exhaustive divers algorithmes sur un ensemble de données afin d’avoir, in fine, quelques éléments préliminaires de comparaison.

Nous considérerons le logiciel Java Data Mining, Weka [6], comme l'API initiale pour l'exploration de données. Le livre Data Mining [7] donne par exemple quelques algorithmes standards et le mémoire de Master [1] décrit ce qui a été fait pour les algorithmes de classification.

RÉFÉRENCES
[1] L. Parisi, A Knowledge Flow as a Software Product Line, Mémoire de Master, Université Nice Sophia Antipolis, Sept 2016.
[2] P. Clements et L. M. Northrop. Gammes de produits logiciels: pratiques et modèles. Addison-Wesley Professionnel, 2001.
[3] Camillieri C, Parisi L, Blay-Fornarino M, Precioso F, Riveill M, Vaz JC (2016) Towards a Software Product Line for Machine Learning Workflows: Focus on Supporting Evolution. Proc. 10th Work. Model. Evol. co-located with ACM/IEEE 19th Int. Conf. Model Driven Eng. Lang. Syst. (MODELS 2016), Saint-Malo, Fr. Oct. 2, 2016. pp 65–70
[4] Parisi L, Camillieri C, Blay-Fornarino M, Precioso F, Riveill M, Comparison of Workflows: a Step Further, 20 pages, Soumis Journal ECML-PKDD 2017
[5] K. Pohl, G. B? Ockle et F. J. van der Linden. Ingénierie de ligne de produits logiciels: fondations, principes et techniques. Springer-Verlag, 2005.
[6] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, I. H. Witten. Le logiciel WEKA Data Mining: une mise à jour; SIGKDD Explorations, volume 11, numéro 1, 2009.
[7] I. H. Witten, E. Frank et M. A. Hall. Minutage de données: Outils et techniques pratiques d'apprentissage de la machine (3ème éd.). Morgan Kaufmann Publishers Inc., San Francisco, CA, États-Unis, 2011.

Type de stage : R&D

Lieu de travail : laboratoire I3S, Université Nice Sophia Antipolis, bâtiment Templiers
Encadrants : Michel RIVEILL (I3S) / Frédéric PRECIOSO (I3S)
Personne à contacter : Michel Riveill
Email : michel.riveill@unice.fr

#### Compétences Requises
Programmation java, de la rigueur pour rendre reproductible les exécutions



     

#### Informations Administratives
  * Contact : Michel Riveill <michel.riveill@unice.fr>
  * Identifiant sujet : `Y1718-S037`
  * Type : Engineering
  * Parcours Recommandés : SD
  * Équipe: Sparks

#### Références

  * [http://weka.wikispaces.com/](http://weka.wikispaces.com/)
  * [https://docs.google.com/presentation/d/1pBPxYitjK3dzi7ItB6em6Q4giwSS82qPLJCKO2Z1Q80/edit?usp=sharing](https://docs.google.com/presentation/d/1pBPxYitjK3dzi7ItB6em6Q4giwSS82qPLJCKO2Z1Q80/edit?usp=sharing)

#### Besoins Clients
identifier des critères de comparaisons permettant de dire qu'un algorithme sera a priori meilleur qu'un autre pour un jeu de donnée précis.

#### Résultats Attendus
Du code permettant de lancer les différents algorithmes afin d'obtenir leur performance
Un tableau comparatif mettant en évidence les points forts / faibles de chaque algorithmes
     